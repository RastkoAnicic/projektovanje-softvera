/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Klijent;
import domen.Opstina;
import domen.Racun;
import domen.Radnik;
import java.awt.Color;
import java.awt.Dialog;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import kontrolor.Kontrolor;
import tabela.TblModelRacun;
import tabela.TblModelKlijenti;
import util.Util;
import validacija.ValidatorJMBG;
import validacija.IValidator;
import validacija.ValidatorEmail;
import validacija.ValidatorPraznaPolja;

/**
 *
 * @author Nadin kompjuter
 */
public class FMKlijent extends javax.swing.JDialog {

    /**
     * Creates new form FMKlijent
     *
     * @param owner
     * @param modal
     */
    FMRadSaKlijentima fmrsk;

    public FMKlijent(Dialog owner, boolean modal) {
        super(owner, modal);
        initComponents();
        fmrsk = (FMRadSaKlijentima) owner;
        srediFormu();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jpnlLicniPodaci = new javax.swing.JPanel();
        jtxtKlijentID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jErrorMail = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtxtIme = new javax.swing.JTextField();
        jErrorIme = new javax.swing.JLabel();
        jErrorPrezime = new javax.swing.JLabel();
        jtxtPrezime = new javax.swing.JTextField();
        jErrorJMBG = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jErrorKontakt = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtxtJMBG = new javax.swing.JTextField();
        jtxtKontakt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtxtMail = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jcbStatus = new javax.swing.JComboBox<>();
        jbtnDodaj = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblNoviKlijenti = new javax.swing.JTable();
        jbtnIzmeni = new javax.swing.JButton();
        jbtnDeaktiviraj = new javax.swing.JButton();
        jbtnSacuvajSve = new javax.swing.JButton();
        jbtnObrisi = new javax.swing.JButton();
        jpnlPrebivaliste = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jcbOpstina = new javax.swing.JComboBox<>();
        jbtnDodajOpstinu = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jtxtUlica = new javax.swing.JTextField();
        jErrorUlica = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jtxtBroj = new javax.swing.JTextField();
        jErrorBroj = new javax.swing.JLabel();
        jpnlRacuni = new javax.swing.JPanel();
        jbtnKreirajNoviRacun = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblRacuni = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jbtnPogledajDetaljeZaRacun = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTabbedPane.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jtxtKlijentID.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Klijent ID:");

        jErrorMail.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jErrorMail.setForeground(new java.awt.Color(255, 0, 0));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Ime:");

        jtxtIme.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jErrorIme.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jErrorIme.setForeground(new java.awt.Color(255, 0, 0));
        jErrorIme.setText("   ");

        jErrorPrezime.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jErrorPrezime.setForeground(new java.awt.Color(255, 0, 0));

        jtxtPrezime.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jErrorJMBG.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jErrorJMBG.setForeground(new java.awt.Color(255, 0, 0));
        jErrorJMBG.setText(" ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Prezime:");

        jErrorKontakt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jErrorKontakt.setForeground(new java.awt.Color(255, 0, 0));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("JMBG:");

        jtxtJMBG.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jtxtKontakt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Kontakt:");

        jtxtMail.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("E-mail:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Status:");

        jcbStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jbtnDodaj.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnDodaj.setText("Dodaj");
        jbtnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDodajActionPerformed(evt);
            }
        });

        jtblNoviKlijenti.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtblNoviKlijenti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtblNoviKlijenti.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtblNoviKlijentiMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jtblNoviKlijenti);

        jbtnIzmeni.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnIzmeni.setText("Izmeni klijenta");
        jbtnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnIzmeniActionPerformed(evt);
            }
        });

        jbtnDeaktiviraj.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnDeaktiviraj.setText("Deaktiviraj klijenta");
        jbtnDeaktiviraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeaktivirajActionPerformed(evt);
            }
        });

        jbtnSacuvajSve.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnSacuvajSve.setText("Sacuvaj sve");
        jbtnSacuvajSve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSacuvajSveActionPerformed(evt);
            }
        });

        jbtnObrisi.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnObrisi.setText("Obrisi");
        jbtnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnObrisiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnlLicniPodaciLayout = new javax.swing.GroupLayout(jpnlLicniPodaci);
        jpnlLicniPodaci.setLayout(jpnlLicniPodaciLayout);
        jpnlLicniPodaciLayout.setHorizontalGroup(
            jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                        .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(49, 49, 49)
                                .addComponent(jtxtIme, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
                            .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addGap(29, 29, 29)
                                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                                        .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jtxtKontakt)
                                    .addComponent(jtxtMail))))
                        .addGap(31, 31, 31)
                        .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jErrorIme, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jErrorKontakt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jErrorMail, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                        .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel4)))
                        .addGap(30, 30, 30)
                        .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtxtJMBG)
                            .addComponent(jtxtPrezime))
                        .addGap(31, 31, 31)
                        .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jErrorPrezime, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                            .addComponent(jErrorJMBG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                        .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                                .addComponent(jbtnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbtnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(24, 24, 24)
                                    .addComponent(jtxtKlijentID, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel10)
                                .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                                    .addComponent(jbtnIzmeni, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(61, 61, 61)
                                    .addComponent(jbtnDeaktiviraj)
                                    .addGap(62, 62, 62)
                                    .addComponent(jbtnSacuvajSve, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpnlLicniPodaciLayout.setVerticalGroup(
            jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlLicniPodaciLayout.createSequentialGroup()
                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtKlijentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jErrorIme, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtxtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addComponent(jErrorPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jErrorJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jErrorKontakt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtxtKontakt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jErrorMail, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtxtMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addGap(18, 18, 18)
                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jpnlLicniPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnIzmeni, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnDeaktiviraj, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnSacuvajSve, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70))
        );

        jTabbedPane.addTab("Licni podaci", jpnlLicniPodaci);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Opstina:");

        jcbOpstina.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jbtnDodajOpstinu.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnDodajOpstinu.setText("Dodaj opstinu");
        jbtnDodajOpstinu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDodajOpstinuActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Ulica:");

        jtxtUlica.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jErrorUlica.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jErrorUlica.setForeground(new java.awt.Color(255, 0, 0));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Broj:");

        jtxtBroj.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jErrorBroj.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jErrorBroj.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jpnlPrebivalisteLayout = new javax.swing.GroupLayout(jpnlPrebivaliste);
        jpnlPrebivaliste.setLayout(jpnlPrebivalisteLayout);
        jpnlPrebivalisteLayout.setHorizontalGroup(
            jpnlPrebivalisteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlPrebivalisteLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jpnlPrebivalisteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(jpnlPrebivalisteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel9)
                        .addComponent(jLabel7)))
                .addGap(22, 22, 22)
                .addGroup(jpnlPrebivalisteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpnlPrebivalisteLayout.createSequentialGroup()
                        .addComponent(jtxtBroj, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jErrorBroj, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jpnlPrebivalisteLayout.createSequentialGroup()
                        .addGroup(jpnlPrebivalisteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtxtUlica, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbOpstina, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jpnlPrebivalisteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnlPrebivalisteLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                                .addComponent(jbtnDodajOpstinu)
                                .addGap(177, 177, 177))
                            .addGroup(jpnlPrebivalisteLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jErrorUlica, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        jpnlPrebivalisteLayout.setVerticalGroup(
            jpnlPrebivalisteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlPrebivalisteLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jpnlPrebivalisteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jcbOpstina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnDodajOpstinu))
                .addGap(18, 18, 18)
                .addGroup(jpnlPrebivalisteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtxtUlica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jErrorUlica, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(jpnlPrebivalisteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnlPrebivalisteLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jpnlPrebivalisteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtxtBroj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addGroup(jpnlPrebivalisteLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jErrorBroj, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(443, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Prebivaliste", jpnlPrebivaliste);

        jbtnKreirajNoviRacun.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnKreirajNoviRacun.setText("Kreiraj novi racun");
        jbtnKreirajNoviRacun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnKreirajNoviRacunActionPerformed(evt);
            }
        });

        jtblRacuni.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtblRacuni.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtblRacuni.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtblRacuniMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jtblRacuni);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Dosadasnji racuni:");

        jbtnPogledajDetaljeZaRacun.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnPogledajDetaljeZaRacun.setText("Pogledaj detalje za racun");
        jbtnPogledajDetaljeZaRacun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPogledajDetaljeZaRacunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnlRacuniLayout = new javax.swing.GroupLayout(jpnlRacuni);
        jpnlRacuni.setLayout(jpnlRacuniLayout);
        jpnlRacuniLayout.setHorizontalGroup(
            jpnlRacuniLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlRacuniLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jpnlRacuniLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnlRacuniLayout.createSequentialGroup()
                        .addComponent(jbtnKreirajNoviRacun)
                        .addGap(18, 18, 18)
                        .addComponent(jbtnPogledajDetaljeZaRacun))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(253, Short.MAX_VALUE))
        );
        jpnlRacuniLayout.setVerticalGroup(
            jpnlRacuniLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlRacuniLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jpnlRacuniLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbtnPogledajDetaljeZaRacun, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jbtnKreirajNoviRacun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(325, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Racuni", jpnlRacuni);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDodajActionPerformed
        try {
            String ime = jtxtIme.getText().trim();
            String prezime = jtxtPrezime.getText().trim();
            String broj = jtxtBroj.getText().trim();
            String jmbg = jtxtJMBG.getText().trim();
            int klijentID = Integer.parseInt(jtxtKlijentID.getText().trim());
            String kontakt = jtxtKontakt.getText().trim();
            String mail = jtxtMail.getText().trim();
            String ulica = jtxtUlica.getText().trim();
            Opstina opstina = (Opstina) jcbOpstina.getSelectedItem();

            Klijent klijent = napraviObjekat(ime, prezime, broj, jmbg, klijentID, kontakt, mail, ulica, opstina, true);

            TblModelKlijenti tmk = (TblModelKlijenti) jtblNoviKlijenti.getModel();
            tmk.dodaj(klijent);
            ocistiSvaPolja();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }


    }//GEN-LAST:event_jbtnDodajActionPerformed

    private void validacijaJMBG() {
        IValidator vJMBG = new ValidatorJMBG();
        List<Klijent> lista_klijenata = null;
        try {
            lista_klijenata = Kontrolor.getInstance().vratiListuKlijenata();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        String text = jtxtJMBG.getText().trim();
        try {
            vJMBG.izvrsiValidaciju(text);
            jErrorJMBG.setText("");
            jtxtJMBG.setForeground(Color.BLACK);

        } catch (Exception ex) {
            System.out.println("nesto ne valja");
            int klijentID = Integer.parseInt(jtxtKlijentID.getText().trim());
            for (Klijent klijent : lista_klijenata) {
                if (klijent.getKlijentID() == klijentID && klijent.getJmbg().equals(text)) {
                    jErrorJMBG.setText("");
                    jtxtJMBG.setForeground(Color.BLACK);
                    return;
                }
            }
            jErrorJMBG.setText(ex.getMessage());
            jtxtJMBG.setForeground(Color.RED);
            jtxtJMBG.selectAll();
        }
        TblModelKlijenti tmk = (TblModelKlijenti) jtblNoviKlijenti.getModel();
        List<Klijent> noviKlijenti = tmk.getLista_klijenata();
        for (Klijent klijent : noviKlijenti) {
            if (klijent.getJmbg().equals(text)) {
                jErrorJMBG.setText("Uneti JMBG vec postoji u tabeli za dodavanje");
                jtxtJMBG.setForeground(Color.RED);
                jtxtJMBG.selectAll();
            }

        }
    }

    public void DocumentListenerJMBG() {
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                validacijaJMBG();
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                validacijaJMBG();
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                validacijaJMBG();
            }
        };
        jtxtJMBG.getDocument().addDocumentListener(documentListener);
    }

    public void DocumentListenerMail() {
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                validacijaMail();
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                validacijaMail();
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                validacijaMail();
            }
        };
        jtxtMail.getDocument().addDocumentListener(documentListener);
    }

    private void validacijaMail() {
        IValidator vMail = new ValidatorEmail();
        String text = jtxtMail.getText().trim();
        try {
            vMail.izvrsiValidaciju(text);
            jErrorMail.setText("");
            jtxtMail.setForeground(Color.BLACK);

        } catch (Exception ex) {

            jErrorMail.setText(ex.getMessage());
            jtxtMail.setForeground(Color.RED);
            jtxtMail.selectAll();
        }
    }

    private void jbtnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnIzmeniActionPerformed

        try {
            izvrsiValidaciju();
            Klijent klijent = (Klijent) Kontrolor.getInstance().getMapa().get("izabrani_klijent_detalji");
            klijent.setBrojUlice(jtxtBroj.getText().trim());
            klijent.setIme(jtxtIme.getText().trim());
            klijent.setPrezime(jtxtPrezime.getText().trim());
            klijent.setJmbg(jtxtJMBG.getText().trim());
            klijent.setKontakt(jtxtKontakt.getText().trim());
            klijent.setMail(jtxtMail.getText().trim());
            klijent.setOpstina((Opstina) jcbOpstina.getSelectedItem());
            klijent.setUlica(jtxtUlica.getText().trim());
            if (jcbStatus.getSelectedItem().equals("Aktivan")) {
                klijent.setAktivan(true);
            } else {
                klijent.setAktivan(false);
            }
            Kontrolor.getInstance().izmeniKlijenta(klijent);
            fmrsk.promeniUTabeli(klijent);
            fmrsk.onemoguciDugmeDetalji();
            JOptionPane.showMessageDialog(this, "Sistem je zapamtio klijenta", "Čuvanje klijenata", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti klijenta", "Čuvanje klijenata", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jbtnIzmeniActionPerformed
    public void DocumentListenerIme() {
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                validacijaIme();
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                validacijaIme();
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                validacijaIme();
            }
        };
        jtxtIme.getDocument().addDocumentListener(documentListener);
    }

    private void validacijaIme() {
        IValidator vIme = new ValidatorPraznaPolja();
        String text = jtxtIme.getText().trim();
        try {
            vIme.izvrsiValidaciju(text);
            jErrorIme.setText("");
            jtxtIme.setForeground(Color.BLACK);

        } catch (Exception ex) {

            jErrorIme.setText(ex.getMessage());
            jtxtIme.setForeground(Color.RED);
            jtxtIme.selectAll();
        }
    }

    public void DocumentListenerPrezime() {
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                validacijaPrezime();
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                validacijaPrezime();
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                validacijaPrezime();
            }
        };
        jtxtPrezime.getDocument().addDocumentListener(documentListener);
    }

    private void validacijaPrezime() {
        IValidator vPrezime = new ValidatorPraznaPolja();
        String text = jtxtPrezime.getText().trim();
        try {
            vPrezime.izvrsiValidaciju(text);
            jErrorPrezime.setText("");
            jtxtPrezime.setForeground(Color.BLACK);

        } catch (Exception ex) {

            jErrorPrezime.setText(ex.getMessage());
            jtxtPrezime.setForeground(Color.RED);
            jtxtPrezime.selectAll();
        }
    }

    public void DocumentListenerKontakt() {
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                validacijaKontakt();
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                validacijaKontakt();
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                validacijaKontakt();
            }
        };
        jtxtKontakt.getDocument().addDocumentListener(documentListener);
    }

    private void validacijaKontakt() {
        IValidator vKontakt = new ValidatorPraznaPolja();
        String text = jtxtKontakt.getText().trim();
        try {
            vKontakt.izvrsiValidaciju(text);
            jErrorKontakt.setText("");
            jtxtKontakt.setForeground(Color.BLACK);

        } catch (Exception ex) {

            jErrorKontakt.setText(ex.getMessage());
            jtxtKontakt.setForeground(Color.RED);
            jtxtKontakt.selectAll();
        }
    }

    private void jbtnSacuvajSveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSacuvajSveActionPerformed
        TblModelKlijenti tmk = (TblModelKlijenti) jtblNoviKlijenti.getModel();
        List<Klijent> listaKlijenata = tmk.getLista_klijenata();

        try {
            Kontrolor.getInstance().sacuvajKlijente(listaKlijenata);
            fmrsk.osvezi(listaKlijenata);
            fmrsk.onemoguciDugmeDetalji();
            JOptionPane.showMessageDialog(this, "Sistem je zapamtio klijente", "Cuvanje klijenata", JOptionPane.INFORMATION_MESSAGE);
            tmk.obrisiSve();

        } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti klijente", "Cuvanje klijenata", JOptionPane.ERROR_MESSAGE);

            e.printStackTrace();
        }

    }//GEN-LAST:event_jbtnSacuvajSveActionPerformed

    private void jbtnDeaktivirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeaktivirajActionPerformed
        Klijent klijent = (Klijent) Kontrolor.getInstance().getMapa().get("izabrani_klijent_detalji");

        String[] options = new String[2];
        options[0] = new String("Da");
        options[1] = new String("Ne");
        int odgovor = JOptionPane.showOptionDialog(this,
                "Da li ste sigurni da zelite da deaktivirate klijenta?",
                "Potvrda deaktivacije", 0, JOptionPane.QUESTION_MESSAGE, null, options, null);
        try {
            if (odgovor == 0) {
                klijent.setAktivan(false);
                Kontrolor.getInstance().izmeniKlijenta(klijent);
                fmrsk.onemoguciDugmeDetalji();
                JOptionPane.showMessageDialog(this, "Sistem je deaktivirao klijenta", "Deaktiviranje klijenta", JOptionPane.INFORMATION_MESSAGE);

            }
        } catch (Exception ex) {
                                        JOptionPane.showMessageDialog(this, "Sistem ne moze da deaktivira klijenta", "Deaktiviranje klijenta", JOptionPane.ERROR_MESSAGE);

          //  JOptionPane.showMessageDialog(this, ex.getMessage());

        }


    }//GEN-LAST:event_jbtnDeaktivirajActionPerformed

    private void jbtnKreirajNoviRacunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnKreirajNoviRacunActionPerformed

        Kontrolor.getInstance().setAktivnaForma(Util.POPUNI_ZA_KLIJENTA);
        Kontrolor.getInstance().getMapa().put("forma_klijent", this);
        FMRacun fmr = new FMRacun(this, true);
        fmr.setVisible(true);
    }//GEN-LAST:event_jbtnKreirajNoviRacunActionPerformed

    private void jbtnPogledajDetaljeZaRacunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPogledajDetaljeZaRacunActionPerformed

        int red = jtblRacuni.getSelectedRow();
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Morate selektovati racun koji zelite da pogledate");
            return;
        }
        TblModelRacun tmr = (TblModelRacun) jtblRacuni.getModel();
        Racun r = tmr.vratiRacun(red);
        Kontrolor.getInstance().setAktivnaForma(Util.POPUNI_ZA_RACUN);

        Kontrolor.getInstance().getMapa().put("izabrani_racun", r);
        FMRacun fmr = new FMRacun(this, true);
        fmr.setVisible(true);

    }//GEN-LAST:event_jbtnPogledajDetaljeZaRacunActionPerformed

    private void jbtnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnObrisiActionPerformed
        int red = jtblNoviKlijenti.getSelectedRow();
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Morate selektovati klijenta kojeg zelite da uklonite iz tabeble");
            return;
        }
        TblModelKlijenti tmk = (TblModelKlijenti) jtblNoviKlijenti.getModel();
        tmk.ukloniKlijenta(red);

    }//GEN-LAST:event_jbtnObrisiActionPerformed

    private void jbtnDodajOpstinuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDodajOpstinuActionPerformed
        FMOpstina fmo = new FMOpstina(this, true);
        fmo.setLocationRelativeTo(this);
        fmo.setVisible(true);
    }//GEN-LAST:event_jbtnDodajOpstinuActionPerformed

    private void jtblNoviKlijentiMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblNoviKlijentiMousePressed
        jbtnObrisi.setEnabled(true);
    }//GEN-LAST:event_jtblNoviKlijentiMousePressed

    private void jtblRacuniMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblRacuniMousePressed
        jbtnPogledajDetaljeZaRacun.setEnabled(true);
    }//GEN-LAST:event_jtblRacuniMousePressed
    public void DocumentListenerBroj() {
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                validacijaBroj();
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                validacijaBroj();
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                validacijaBroj();
            }
        };
        jtxtBroj.getDocument().addDocumentListener(documentListener);
    }

    private void validacijaBroj() {
        IValidator vBroj = new ValidatorPraznaPolja();
        String text = jtxtBroj.getText().trim();
        try {
            vBroj.izvrsiValidaciju(text);
            jErrorBroj.setText("");
            jtxtBroj.setForeground(Color.BLACK);

        } catch (Exception ex) {

            jErrorBroj.setText(ex.getMessage());
            jtxtBroj.setForeground(Color.RED);
            jtxtBroj.selectAll();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jErrorBroj;
    private javax.swing.JLabel jErrorIme;
    private javax.swing.JLabel jErrorJMBG;
    private javax.swing.JLabel jErrorKontakt;
    private javax.swing.JLabel jErrorMail;
    private javax.swing.JLabel jErrorPrezime;
    private javax.swing.JLabel jErrorUlica;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JButton jbtnDeaktiviraj;
    private javax.swing.JButton jbtnDodaj;
    private javax.swing.JButton jbtnDodajOpstinu;
    private javax.swing.JButton jbtnIzmeni;
    private javax.swing.JButton jbtnKreirajNoviRacun;
    private javax.swing.JButton jbtnObrisi;
    private javax.swing.JButton jbtnPogledajDetaljeZaRacun;
    private javax.swing.JButton jbtnSacuvajSve;
    private javax.swing.JComboBox<String> jcbOpstina;
    private javax.swing.JComboBox<String> jcbStatus;
    private javax.swing.JPanel jpnlLicniPodaci;
    private javax.swing.JPanel jpnlPrebivaliste;
    private javax.swing.JPanel jpnlRacuni;
    private javax.swing.JTable jtblNoviKlijenti;
    private javax.swing.JTable jtblRacuni;
    private javax.swing.JTextField jtxtBroj;
    private javax.swing.JTextField jtxtIme;
    private javax.swing.JTextField jtxtJMBG;
    private javax.swing.JTextField jtxtKlijentID;
    private javax.swing.JTextField jtxtKontakt;
    private javax.swing.JTextField jtxtMail;
    private javax.swing.JTextField jtxtPrezime;
    private javax.swing.JTextField jtxtUlica;
    // End of variables declaration//GEN-END:variables

    private void popuniComboBoxOpstine() {
        try {
            List<Opstina> lista_opstina = Kontrolor.getInstance().vratiListuOpstina();
            jcbOpstina.setModel(new DefaultComboBoxModel(lista_opstina.toArray()));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }

    private int vratiNajveciIDKlijenta() {
        try {
            return Kontrolor.getInstance().vratiNajveciIDKlijenta();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return -1;
        }

    }

    private Klijent napraviObjekat(String ime, String prezime, String broj, String jmbg, int klijentID, String kontakt, String mail, String ulica, Opstina opstina, boolean clanarina) throws Exception {

        try {
            izvrsiValidaciju();
        } catch (Exception ex) {
            throw ex;
        }
        Klijent klijent = new Klijent(klijentID, ime, prezime, jmbg, kontakt, mail, ulica, broj, opstina, clanarina);
        return klijent;
    }

    private void popuniFormuSaPodacimaOIzabranomKlijentu(Klijent klijent) {
        jtxtKlijentID.setText(klijent.getKlijentID() + "");
        jtxtIme.setText(klijent.getIme());
        jtxtPrezime.setText(klijent.getPrezime());
        jtxtKontakt.setText(klijent.getKontakt());
        jtxtBroj.setText(klijent.getBrojUlice());
        jtxtJMBG.setText(klijent.getJmbg());
        jtxtMail.setText(klijent.getMail());
        jtxtUlica.setText(klijent.getUlica());
        jcbOpstina.setSelectedItem(klijent.getOpstina());
        if (klijent.isAktivan()) {
            jcbStatus.setSelectedItem("Aktivan");
        } else {
            jcbStatus.setSelectedItem("Neaktivan");
        }

    }

    private void izvrsiValidaciju() throws Exception {
        validacijaIme();
        validacijaPrezime();
        validacijaJMBG();
        validacijaKontakt();
        validacijaMail();
        validacijaUlica();
        validacijaBroj();

        if (!jErrorJMBG.getText().trim().isEmpty() || !jErrorMail.getText().trim().isEmpty()
                || !jErrorBroj.getText().trim().isEmpty() || !jErrorIme.getText().trim().isEmpty()
                || !jErrorKontakt.getText().trim().isEmpty()
                || !jErrorPrezime.getText().trim().isEmpty() || !jErrorUlica.getText().trim().isEmpty()) {
            if (jErrorJMBG.getText().trim().isEmpty() && jErrorMail.getText().trim().isEmpty()
                    && jErrorIme.getText().trim().isEmpty() && jErrorKontakt.getText().trim().isEmpty()
                    && jErrorPrezime.getText().trim().isEmpty()) {
                jTabbedPane.setSelectedIndex(1);
            }
            throw new Exception("Niste ispravno popunili sva polja!");

        }
    }

    private void srediFormu() {
        int aktivnaForma = Kontrolor.getInstance().getAktivnaForma();
        setSize(670, 710);
        setLocation(680, 0);
        if (aktivnaForma == util.Util.UNOS_KLIJENTA) {
            jTabbedPane.remove(2);
            jbtnDodaj.setVisible(true);
            jbtnIzmeni.setVisible(false);
            jbtnDeaktiviraj.setVisible(false);
            jbtnSacuvajSve.setVisible(true);
            jLabel1.setVisible(false);
            jtxtKlijentID.setVisible(false);
            jbtnObrisi.setVisible(true);
            jbtnObrisi.setEnabled(false);
            jtxtKlijentID.setText(-1 + "");
            popuniComboBoxOpstine();
            popuniComboBoxStatus();
            postaviModelTabele();
            postaviUlogovanogRadnika();
            postaviDocumentListener();

        }
        if (aktivnaForma == util.Util.DETALJI_KLIJENTA) {
            jpnlRacuni.setVisible(true);
            jbtnDodaj.setVisible(false);
            jbtnIzmeni.setVisible(true);
            jbtnDeaktiviraj.setVisible(true);
            jbtnSacuvajSve.setVisible(false);
            jScrollPane2.setVisible(false);
            jbtnObrisi.setVisible(false);
            jbtnPogledajDetaljeZaRacun.setEnabled(false);
            popuniComboBoxOpstine();
            popuniComboBoxStatus();
            postaviModelTabele();
            postaviUlogovanogRadnika();
            popuniRacuneZaIzabranogKlijenta();
            postaviDocumentListener();
            Klijent k = ((Klijent) Kontrolor.getInstance().getMapa().get("izabrani_klijent_detalji"));
            popuniFormuSaPodacimaOIzabranomKlijentu(k);

        }

    }

    public void DocumentListenerUlica() {
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                validacijaUlica();
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                validacijaUlica();
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                validacijaUlica();
            }
        };
        jtxtUlica.getDocument().addDocumentListener(documentListener);
    }

    private void validacijaUlica() {
        String text = jtxtUlica.getText().trim();
        IValidator vUlica = new ValidatorPraznaPolja();
        try {
            vUlica.izvrsiValidaciju(text);
            jErrorUlica.setText("");
            jtxtUlica.setForeground(Color.BLACK);

        } catch (Exception ex) {

            jErrorUlica.setText(ex.getMessage());
            jtxtUlica.setForeground(Color.RED);
            jtxtUlica.selectAll();
        }

    }

    private void postaviModelTabele() {
        List<Klijent> lista_klijenata = new LinkedList<>();
        TblModelKlijenti tmk = new TblModelKlijenti(lista_klijenata);
        jtblNoviKlijenti.setModel(tmk);

    }

    private void popuniComboBoxStatus() {
        jcbStatus.addItem("Aktivan");
        jcbStatus.addItem("Neaktivan");

    }

    private void postaviDocumentListener() {
        DocumentListenerJMBG();
        DocumentListenerMail();
        DocumentListenerBroj();
        DocumentListenerIme();
        DocumentListenerKontakt();
        DocumentListenerPrezime();
        DocumentListenerUlica();
    }

    private void postaviUlogovanogRadnika() {
        Radnik radnik = (Radnik) Kontrolor.getInstance().getMapa().get("Ulogovan_radnik");
        this.setTitle(this.getTitle() + " Radnik: " + radnik);
    }

    void dodajUCombo(Opstina o) {
        try {
            List<Opstina> opstine = Kontrolor.getInstance().vratiListuOpstina();
            jcbOpstina.setModel(new DefaultComboBoxModel(opstine.toArray()));
            jcbOpstina.setSelectedItem(o);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void popuniRacuneZaIzabranogKlijenta() {
        Klijent k = (Klijent) Kontrolor.getInstance().getMapa().get("izabrani_klijent_detalji");
        Racun r = new Racun();
        r.getMapaUslov().put(util.Util.USLOV_KLIJENT, k);
        try {
            List<Racun> racuni = Kontrolor.getInstance().vratiRacuneZaKlijenta(r);
            TblModelRacun tmr = new TblModelRacun(racuni);
            jtblRacuni.setModel(tmr);

        } catch (Exception exception) {
            JOptionPane.showMessageDialog(this, exception.getMessage());
        }

    }

    private void ocistiSvaPolja() {
        jtxtBroj.setText("");
        jtxtIme.setText("");
        jtxtJMBG.setText("");
        jtxtKontakt.setText("");
        jtxtMail.setText("");
        jtxtPrezime.setText("");
        jtxtUlica.setText("");

        jErrorBroj.setText("");
        jErrorIme.setText("");
        jErrorJMBG.setText("");
        jErrorKontakt.setText("");
        jErrorMail.setText("");
        jErrorPrezime.setText("");
        jErrorUlica.setText("");
    }

}
